{"ast":null,"code":"import React from \"react\";\nimport Head from 'next/head';\nimport { createRefetchContainer, graphql } from 'react-relay'; // import createQueryRenderer from '../relay/createQueryRenderer';\n\nimport withData from '../relay/withData'; // @ts-ignore\n\nfunction Index(_ref) {\n  var query = _ref.query;\n  return React.createElement(\"div\", null, React.createElement(Head, null, React.createElement(\"title\", null, \"Bastiani Blog\"), React.createElement(\"meta\", {\n    name: \"viewport\",\n    content: \"initial-scale=1.0, width=device-width\"\n  })), React.createElement(\"ul\", null, query && query.posts && // @ts-ignore\n  query.posts.edges.map(function (_ref2) {\n    var node = _ref2.node;\n    return React.createElement(\"li\", {\n      key: node.id\n    }, \"Title: \", node.title);\n  })));\n}\n\nvar IndexRefetchContainer = createRefetchContainer(Index, {\n  query: function query() {\n    var node = require(\"./__generated__/pages_query.graphql\");\n\n    if (node.hash && node.hash !== \"c1faaf082bc43b31473ce93342f53495\") {\n      console.error(\"The definition of 'pages_query' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"./__generated__/pages_query.graphql\");\n  }\n}, function () {\n  var node = require(\"./__generated__/pages_refetchQuery.graphql\");\n\n  if (node.hash && node.hash !== \"2e30f68ee5822c12738c39c8aacdb93a\") {\n    console.error(\"The definition of 'pages_refetchQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n  }\n\n  return require(\"./__generated__/pages_refetchQuery.graphql\");\n});\nexport default withData(IndexRefetchContainer, {\n  query: function query() {\n    var node = require(\"./__generated__/pagesQuery.graphql\");\n\n    if (node.hash && node.hash !== \"e5f26ca2cd7dc4359fdc206670f4e6b8\") {\n      console.error(\"The definition of 'pagesQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"./__generated__/pagesQuery.graphql\");\n  },\n  variables: {\n    first: 10,\n    search: ''\n  }\n});","map":{"version":3,"sources":["/Users/rafael/Projetos/bastiani-blog/pages/index.tsx"],"names":["Head","createRefetchContainer","graphql","withData","Index","query","posts","edges","map","node","id","title","IndexRefetchContainer","variables","first","search"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,sBAAT,EAAiCC,OAAjC,QAAgD,aAAhD,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,mBAArB,C,CAEA;;AACA,SAASC,KAAT,OAA0B;AAAA,MAATC,KAAS,QAATA,KAAS;AACxB,SACE,iCACE,oBAAC,IAAD,QACE,mDADF,EAEE;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAC;AAA9B,IAFF,CADF,EAKE,gCACGA,KAAK,IAAIA,KAAK,CAACC,KAAf,IACC;AACAD,EAAAA,KAAK,CAACC,KAAN,CAAYC,KAAZ,CAAkBC,GAAlB,CAAsB;AAAA,QAAGC,IAAH,SAAGA,IAAH;AAAA,WAAc;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC;AAAd,kBAA0BD,IAAI,CAACE,KAA/B,CAAd;AAAA,GAAtB,CAHJ,CALF,CADF;AAcD;;AAED,IAAMC,qBAAqB,GAAGX,sBAAsB,CAClDG,KADkD,EAElD;AACEC,EAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADP,CAFkD;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAApD;AAiCA,eAAeF,QAAQ,CAACS,qBAAD,EAAwB;AAC7CP,EAAAA,KAAK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,GADwC;AAM7CQ,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE,EADE;AAETC,IAAAA,MAAM,EAAE;AAFC;AANkC,CAAxB,CAAvB","sourcesContent":["import Head from 'next/head';\nimport { createRefetchContainer, graphql } from 'react-relay';\n\n// import createQueryRenderer from '../relay/createQueryRenderer';\nimport withData from '../relay/withData';\n\n// @ts-ignore\nfunction Index({ query }) {\n  return (\n    <div>\n      <Head>\n        <title>Bastiani Blog</title>\n        <meta name='viewport' content='initial-scale=1.0, width=device-width' />\n      </Head>\n      <ul>\n        {query && query.posts && (\n          // @ts-ignore\n          query.posts.edges.map(({ node }) => <li key={node.id}>Title: {node.title}</li>)\n        )}\n      </ul>\n    </div>\n  );\n}\n\nconst IndexRefetchContainer = createRefetchContainer(\n  Index,\n  {\n    query: graphql`\n      fragment pages_query on Query\n        @argumentDefinitions(\n          search: { type: \"String!\" }\n          first: { type: Int }\n        ) {\n        posts(first: $first, search: $search)\n          @connection(key: \"Index_posts\", filters: []) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          edges {\n            node {\n              id\n              title\n              text\n            }\n          }\n        }\n      }\n    `,\n  },\n  graphql`\n    query pages_refetchQuery($first: Int, $search: String) {\n      ...pages_query @arguments(first: $first, search: $search)\n    }\n  `,\n);\n\nexport default withData(IndexRefetchContainer, {\n  query: graphql`\n    query pagesQuery($first: Int, $search: String) {\n      ...pages_query @arguments(first: $first, search: $search)\n    }\n  `,\n  variables: {\n    first: 10,\n    search: '',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}